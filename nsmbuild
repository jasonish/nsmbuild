#! /usr/bin/env python

from __future__ import print_function

import sys
import os
import os.path
import imp
import getopt
import subprocess
import shutil
import re
import json

sys.dont_write_bytecode = True

sys.path.insert(
    0, os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), "lib"))

import nsmbuild.commands

def configure():

    config = {}
    config["root-dir"] = os.path.dirname(os.path.abspath(sys.argv[0]))
    config["install-root"] = config["root-dir"]
    config["distfile-dir"] = os.path.join(
        config["root-dir"], "builds/distfiles")

    config["uname-sysname"] = os.uname()[0]

    config["dist-name"] = "unknown"
    config["dist-version"] = "unknown"

    if os.path.exists("/etc/os-release"):
        config["dist-name"] = subprocess.Popen(
            ". /etc/os-release; echo ${ID}", 
            shell=True, 
            stdout=subprocess.PIPE).communicate()[0].strip().decode()
        config["dist-version"] = int(
            subprocess.Popen(
                ". /etc/os-release; echo ${VERSION_ID}", 
                shell=True, 
                stdout=subprocess.PIPE).communicate()[0])
    elif os.path.exists("/etc/redhat-release"):
        m = re.match(".*release (\d+)", open("/etc/redhat-release").read())
        if m:
            config["dist-name"] = "el"
            config["dist-version"] = int(m.group(1))

    config["use-sudo"] = False

    config_filename = os.path.join(config["root-dir"], "config.json")
    if os.path.exists(config_filename):
        config.update(json.load(open(config_filename)))

    return config

def usage(file=sys.stderr):
    print("""
usage: nsmbuid <command> [<args>]

Basic commands:
    info <build> [opts]      - Info on a build
    install <build> [opts]   - Install a build
    uninstall <build>        - Uninstall a build
    link <build>             - Link a build
    unlink <build>           - Unlink a build
    list                     - List builds
    clean                    - Cleanup
    config [-h] [<args>]     - Show/set configuration
""")

def main():

    config = configure()

    try:
        opts, args = getopt.getopt(sys.argv[1:], "", [])
        if not args:
            usage(file=sys.stderr)
            return 1
    except getopt.GetoptError as err:
        print("error: %s" % (err))
        return 1

    command, args = args[0], args[1:]
    if command in nsmbuild.commands.commands:
        return nsmbuild.commands.commands[command](config).run(args)
    else:
        print("error: unknown command: %s" % (command), file=sys.stderr)
        usage(file=sys.stderr)
        return 1

    return 0

if __name__ == "__main__":
   sys.exit(main())
